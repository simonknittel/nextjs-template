name: Validate app

on:
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-24.04

    steps:
      - uses: actions/checkout@v4.2.1

      - uses: actions/setup-node@v4.0.4
        with:
          node-version-file: .nvmrc

      - name: Get npm cache directory
        id: npm-cache-dir
        run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}

      - uses: actions/cache@v4.1.1
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-${{ hashFiles('.nvmrc', 'package-lock.json', 'prisma/prisma.schema') }}

      - name: Install dependencies
        run: npm ci --prefer-offline

      - name: Build
        run: npm run build
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/postgres

      - uses: actions/upload-artifact@v4.4.3
        with:
          name: build
          path: .next/
          if-no-files-found: error
          retention-days: 1
          include-hidden-files: true

  lint:
    runs-on: ubuntu-24.04

    steps:
      - uses: actions/checkout@v4.2.1

      - uses: actions/setup-node@v4.0.4
        with:
          node-version-file: .nvmrc

      - name: Get npm cache directory
        id: npm-cache-dir
        run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}

      - uses: actions/cache@v4.1.1
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-${{ hashFiles('.nvmrc', 'package-lock.json', 'prisma/prisma.schema') }}

      - name: Install dependencies
        run: npm ci --prefer-offline

      - name: Lint
        run: npm run lint
        env:
          SKIP_VALIDATION: "1"

  prettier:
    runs-on: ubuntu-24.04

    steps:
      - uses: actions/checkout@v4.2.1

      - uses: actions/setup-node@v4.0.4
        with:
          node-version-file: .nvmrc

      - name: Get npm cache directory
        id: npm-cache-dir
        run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}

      - uses: actions/cache@v4.1.1
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-${{ hashFiles('.nvmrc', 'package-lock.json', 'prisma/prisma.schema') }}

      - name: Install dependencies
        run: npm ci --prefer-offline

      - name: Prettier
        run: npx prettier --check .

  test:
    runs-on: ubuntu-24.04

    steps:
      - uses: actions/checkout@v4.2.1

      - uses: actions/setup-node@v4.0.4
        with:
          node-version-file: .nvmrc

      - name: Get npm cache directory
        id: npm-cache-dir
        run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}

      - uses: actions/cache@v4.1.1
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-${{ hashFiles('.nvmrc', 'package-lock.json', 'prisma/prisma.schema') }}

      - name: Install dependencies
        run: npm ci --prefer-offline

      - name: Test
        run: npm run test

  playwright:
    needs: build

    runs-on: ubuntu-24.04

    container: mcr.microsoft.com/playwright:v1.48.2-noble

    services:
      postgres:
        image: postgres:17.0-alpine3.20
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      # The container comes without preinstalled Git LFS
      - name: Install Git LFS
        run: |
          apt-get update
          apt-get install git-lfs
          git lfs install

      - uses: actions/checkout@v4.2.1
        with:
          lfs: true

      - uses: actions/setup-node@v4.0.4
        with:
          node-version-file: .nvmrc

      - name: Download math result for job 2
        uses: actions/download-artifact@v4.1.8
        with:
          name: build
          path: .next

      - name: Install Playwright dependencies
        run: npm ci
        working-directory: playwright

      # https://github.com/actions/runner-images/blob/main/images/ubuntu/Ubuntu2404-Readme.md#postgresql
      - name: Prepare database
        run: |
          npx prisma generate --schema=../prisma/schema.prisma --generator=playwrightClient
          npx prisma db push --schema=../prisma/schema.prisma
        env:
          DATABASE_URL: postgresql://postgres:postgres@postgres:5432/postgres
        working-directory: playwright

      - name: Run Playwright tests
        run: npx playwright test
        env:
          DATABASE_URL: postgresql://postgres:postgres@postgres:5432/postgres
        working-directory: playwright

      - uses: actions/upload-artifact@v4.4.3
        if: always()
        with:
          name: playwright-report
          path: playwright/playwright-report/
          retention-days: 7
