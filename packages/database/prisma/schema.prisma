generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["omitApi"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

//
// Users
//

model User {
    id                      String                   @id @default(cuid(2))
    email                   String                   @unique
    emailVerifiedAt         DateTime?
    passwordHash            String?
    systemRole              UserSystemRole           @default(USER)
    role                    UserRole                 @default(USER)
    emailVerificationTokens EmailVerificationToken[]
    passwordResetTokens     PasswordResetToken[]
    sessions                Session[]
    createdTeams            Team[]                   @relation("createdUsers")
    disabledTeams           Team[]                   @relation("disabledTeams")
    teamMemberships         TeamMembership[]

    signupAt DateTime? @default(now())

    invitedAt    DateTime? @default(now())
    invitedById  String?
    invitedBy    User?     @relation("invitedUsers", fields: [invitedById], references: [id])
    invitedUsers User[]    @relation("invitedUsers")

    disabledAt    DateTime?
    disabledById  String?
    disabledBy    User?     @relation("disabledUsers", fields: [disabledById], references: [id])
    disabledUsers User[]    @relation("disabledUsers")
}

enum UserSystemRole {
    ADMIN
    USER
}

enum UserRole {
    ADMIN
    USER
}

model Session {
    id        String   @id
    userId    String
    user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
    expiresAt DateTime
}

model EmailVerificationToken {
    hash      String   @id
    userId    String
    user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
    expiresAt DateTime
}

model PasswordResetToken {
    hash      String   @id
    userId    String
    user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
    expiresAt DateTime
}

//
// Teams
//

model Team {
    id          String           @id @default(cuid(2))
    name        String
    memberships TeamMembership[]

    createdAt   DateTime @default(now())
    createdById String
    createdBy   User     @relation("createdUsers", fields: [createdById], references: [id])

    disabledAt   DateTime?
    disabledById String?
    disabledBy   User?     @relation("disabledTeams", fields: [disabledById], references: [id])
}

model TeamMembership {
    id     String @id @default(cuid(2))
    teamId String
    team   Team   @relation(fields: [teamId], references: [id])
    userId String
    user   User   @relation(fields: [userId], references: [id])
}
